---
- name: install catalyst services (pull reserves, traject)
  hosts: services

  tasks:
  - name: set rails environment var
    lineinfile:
      dest:   "/etc/profile.d/rails.sh"
      regexp: "^export RAILS_ENV="
      line:   "export RAILS_ENV={{ rails_env }}"
      state:  present
      create: yes
    become: true

  - name: set debugging environment var
    lineinfile:
      dest:   "/etc/profile.d/rails.sh"
      regexp: "^export DEBUGGING="
      line:   "export DEBUGGING={{ debugging | default('false') }}"
      state:  present
      create: yes
    become: true

  - name: put ruby on everyone's path
    lineinfile:
      dest:   "/etc/profile.d/ruby.sh"
      regexp: "^export PATH="
      line:   "export PATH=$PATH:{{ service_ruby_path }}/bin"
      state:  present
      create: yes
    become: true

  - name: symlink ruby for root
    file:
      src: "{{ service_ruby_path }}/bin/{{ item }}"
      dest: "/usr/bin/{{ item }}"
      state: link
      force: yes
    become: true
    with_items:
      - ruby
      - gem
      - irb
      - rake
      - rdoc
      - bundle
      - jruby
      - jgem

    # TODO: remove this is we ever fix our jruby install process
  # FIXME: this doesn't actually have the desired effect on stage or prod
  # (pre-existing servers configured oddly)
  # additional efforts to use the cortrect ruby below...
  - name: configure chruby to use the appropriate ruby version
    template:
      src: "chruby.sh.j2"
      dest: "/etc/profile.d/chruby.sh"
      mode: "u+x"
    become: true

  - name: configure application user
    include: configure_app_user.yml

  # begin legacy server ruby version block
  - block:
    # NOTE: our existing stage & prod services servers (catsolrmaster & -test)
    # have an atypical home dir for the application user (catalyst)
    - name: get app user info
      getent:
        database: passwd
        key: "{{ app_user }}"
        split: ":"
    - debug:
        var: getent_passwd
        verbosity: 2

    - name: save app user's home directory
      set_fact:
        app_user_home: "{{ getent_passwd[app_user][4] }}" # < fragile, but apparently standard

    - name: create or update app user's ruby version file
      lineinfile:
        dest:   "{{ app_user_home }}/.ruby-version"
        regexp: "^(.*)$"
        line:   "{{ service_ruby_version }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        state:  present
        create: yes
      become: true

    when: legacy_server
  # end legacy server ruby version block

  - name: make sure deploy dir exists
    file:
      path: "{{ deploy_dir }}"
      owner: "{{ login_user }}"
      state: directory
      recurse: true
    become: true

  - name: get application from repo
    git:
      repo: "{{ app_repo }}"
      dest: "{{ download_dir }}"
      version: "{{ app_branch | default('HEAD') }}"
      key_file: "{{ deploy_key_full_path }}"
      ssh_opts: "-o StrictHostKeyChecking=no"

  - name: deploy pull reserves
    shell: "cp {{ download_dir }}/{{ app_name }}/* {{ deploy_dir }}"

  - name: Install Bundler.
    gem:
      name: bundler
      version: "{{ service_bundler_version }}"
      state: present
      user_install: no
    become: true

  - name: configure bundle install based on mode
    set_fact:
      deployment_mode: false
  - set_fact:
      deployment_mode: true
    when: mode == "deploy"

  # NOTE: exclude_groups is problematic in the current bundler module
  # & we don't actually need it for our only service - pull-reserves
  # NOTE: jruby is problematic on dev
  # # NOTE: don't install spring in production environments:
  # # https://github.com/projecthydra/hydra-head/issues/201
  # - name: adjust for the rails environment
  #   set_fact:
  #     exclude: ""
  #   set_fact:
  #     exclude: "--without development test"
  #   when: rails_env == 'production'

  # - debug:
  #     msg: "exclude = {{ exclude }}"

  - name: install the project's gems for deployment
    bundler:
      chdir: "{{ deploy_dir }}"
      gem_path: "vendor/bundle"
      deployment_mode: "{{ deployment_mode }}"
      # exclude_groups: "{{ exclude | default(omit) }}"

  - name: make sure config dir exists
    file:
      path: "{{ deploy_dir }}/config"
      owner: "{{ login_user }}"
      state: directory
      recurse: true

  - name: configure catalyst database connection
    no_log: "{{ not debugging }}"
    template:
      src:  "templates/database.yml.j2"
      dest:  "{{ deploy_dir }}/config/database.yml"

  - name: configure horizon database connection
    no_log: "{{ not debugging }}"
    template:
      src:  "templates/horizon.yml.j2"
      dest:  "{{ deploy_dir }}/config/horizon.yml"

  - name: make sure log dir exists
    file:
      path: "{{ deploy_dir }}/log"
      owner: "{{ login_user }}"
      state: directory
      recurse: true
    become: true

  - name: set ownership of deploy dir and contents
    file:
      path: "{{ deploy_dir }}"
      owner: "{{ app_user }}"
      group: "{{ app_group }}"
      state: directory
      recurse: true
    become: true

  # Creates a cron file under /etc/cron.d
  # runs every 5 minutes between the hours of 6am and 11pm
  - cron:
      name: "pull reserves"
      minute: "*/5"
      hour: "6-23"
      user: "{{ app_user }}"
      job: "/bin/bash -lc 'cd {{ deploy_dir }} && ruby ./pull_reserves.rb >> log/pull_reserves_cron.log 2>&1'"
      cron_file: "pull_reserves"
      state: present
    become: true
