# REM: if you are looking for passwords or other variables
# that vary from dev to stage to prod, check the other subfolders

# setup vars
project:                      "catalyst-ansible"
version:                      "1.0.0"

mode:                         "deploy" # dev || deploy

app_repo:                     "git@github.com:jhu-library-applications/catalyst-blacklight.git" #"https://github.com/jhu-library-applications/catalyst-blacklight"
app_branch:                   "main"
app_name:                     "catalyst"
app_user:                     "{{ app_name }}"
app_group:                    "{{ app_name }}"
base_deploy_dir:              "/opt"
deploy_dir:                   "{{ base_deploy_dir }}/{{ app_name }}"
bundle_dir:                   "{{ base_deploy_dir }}/{{ app_name }}/shared/bundle"
# deploy keys vars
deploy_user:                  "{{ login_user }}"
deploy_key_path:              "/home/{{ deploy_user }}/.ssh"
catalyst_deploy_keys:
- name:                       "catalyst_deploy_key"
  private_key:                "{{ vault_deploy_private_key }}"
  public_key:                 "{{ vault_deploy_public_key }}"
catalyst_deploy_key_full_path:  "{{ deploy_key_path }}/{{ catalyst_deploy_keys[0]['name'] }}"
solr_deploy_keys:
- name:                       "catalyst_solr_deploy_key"
  private_key:                "{{ vault_solr_private_key }}"
  public_key:                 "{{ vault_solr_public_key }}"
solr_deploy_key_full_path:    "{{ deploy_key_path }}/{{ solr_deploy_keys[0]['name'] }}"

# rails vars
rails_env:                    "development"
# NOTE: need to keep in sync with application Gemfile
# TODO: test updating to recent version
rails_version:                "4.2.4"
secret_key_base:              "" # will be generated
rails_master_key:             "{{ vault_rails_master_key }}"

# bundler
bundler_version: ">= 2.2.6"

# Node
nodejs_version: "12.x"
nodejs_npm_global_packages:
  - yarn
nodejs_install_npm_user: "root"

# apache vars
#
# These three variables are needed by playbooks/catalyst_install.yml
#
apache_service:               "httpd"
apache_config_file:           "/etc/{{ apache_service }}/conf.d/01_{{ hostname }}.conf"
apache_http_redirect_marker:  "http redirect"

apache_global_vhost_settings: |
  SSLUseStapling On
  SSLStaplingCache "shmcb:logs/ssl_stapling(32768)"
  Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains"
  Header always set X-Frame-Options "ALLOW-FROM https://jhu.libwizard.com/"
  Header always set X-Content-Type-Options nosniff
apache_vhosts_filename: "01_{{ hostname | default('myapp') }}.conf"
apache_vhosts:
  # Additional optional properties: 'serveradmin, serveralias, extra_parameters'.
  - servername: "{{ hostname | default('myapp') }}.{{ domainname | default('test.test') }}"
    extra_parameters: |
      Redirect "/" "https://{{ hostname | default('myapp') }}.{{ domainname | default('test.test') }}"

apache_vhosts_ssl:
  - servername: "{{ hostname | default('myapp') }}.{{ domainname | default('test.test') }}"
    #    documentroot: "/opt/catalyst/current/public"
    certificate_file: "{{ ssl_certificate_path }}/{{ ssl_certificate_file }}"
    certificate_key_file: "{{ ssl_key_path }}/{{ ssl_certificate_key_file }}"
    certificate_chain_file: "{{ ssl_certificate_path }}/{{ ssl_certificate_chain_file }}"
    #    extra_parameters: |

apache_ssl_protocol: "all -SSLv3 -TLSv1 -TLSv1.1"
apache_ssl_cipher_suite: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"


# passenger vars
# TODO: adopt and move up
passenger_deploy_dir:         "{{ deploy_dir }}/current"

update_packages:        false
# NOTE: use this to override the passenger virtualhost sub-template
# passenger_virtualhost_template:     "templates/passenger_virtualhost.j2"

# ssh vars


# ssh vars
use_master_user:          true
deprivilege_deploy_user:  true
remote_user:              "{{ lookup('ini', 'remote_user section=cross-project file=~/.ansible.ini') }}"
login_user:               "{{ lookup('ini', 'login_user section=cross-project file=~/.ansible.ini') }}"
login_user_key:           "jhu_ssh_key"
create_login_user_key:    true
login_user_grant_sudo:    false
ssh_settings:
- regexp: "^PermitRootLogin"
  setting: "PermitRootLogin no"
- regexp: "^DenyUsers deploy"
  setting: "DenyUsers deploy"

# ip vars
# NOTE: we don't always have a 1:1 mapping of environments to groups
# when it comes to external resources, so centralizing ip vars here
webscanner_ip:          "{{ vault_webscanner_ip }}"
nagios_ip:              "{{ vault_nagios_ip }}"
findit_ip_prod:         "{{ vault_findit_ip_prod }}"
findit_ip_test:         "{{ vault_findit_ip_test }}"
refworks_ips:           "{{ vault_refworks_ips }}"
hopkins_ip_range:       "{{ vault_hopkins_ip_range }}"
# by default use test findit (for running tests, etc)
findit_ip:              "{{ findit_ip_test }}"

bantheman_configs:
  - ip: "{{ webscanner_ip }}"
    paths:
      - "^/catalog.*$"
      # - "^/catalog/bib_.*$"
      # - "^/catalog\\?.*$"

# Logrotate for wtmp
logrotate_wtmp_enable: true
logrotate_wtmp:
  logs:
    - /var/log/wtmp
  options:
    - monthly
    - create 0664 root utmp
    - "    minsize 1M"
    - rotate 1

logrotate_applications:
  - name: catalyst
    definitions:
      - logs:
        - "{{ deploy_dir }}/log/*log"
        options:
          - su catalyst catalyst
          - daily
          - rotate 24
          - compress
          - delaycompress
          - missingok
          - create 0600
          - dateext
  - name: httpd
    definitions:
      - logs:
        - "/var/log/httpd/*log"
        options:
          - missingok
          - notifempty
          - sharedscripts
          - compress
          - delaycompress
          - postrotate
          - "    /bin/systemctl reload httpd.service > /dev/null 2>/dev/null || true"
          - endscript

testup_cucumber_vars_template:  "templates/test_vars.rb"
testup_relative_path_to_root:   "../"
testup_cucumber_repo:           "https://github.com/dheles/catalyst-cucumber-tests.git"

# NOTE: set within inventory files for particular hosts
legacy_server:                  false

# jetty vars
jetty_base:             "/opt/jetty"
jetty_user:             "jetty"
jetty_group:            "{{ jetty_user }}"
jetty_port:             8080

# firewalld vars:
firewalld_update_packages:  false
firewalld_ipsets:
  - name: jetty_whitelist
    ips:
      - "{{ findit_ip_test }}"
jetty_accept_rule_nolog:    'rule family="ipv4" source ipset="jetty_whitelist" port port="{{ jetty_port }}" protocol="tcp" accept'
jetty_accept_rule:          'rule family="ipv4" source ipset="jetty_whitelist" port port="{{ jetty_port }}" protocol="tcp" log prefix="jetty-access-allowed" level="info" limit value="1/m" accept'
jetty_reject_rule:          'rule family="ipv4" source NOT ipset="jetty_whitelist" port port="{{ jetty_port }}" protocol="tcp" log prefix="jetty-access-denied" level="info" limit value="1/m" reject'
catalyst_http_accept_rule:  'rule family="ipv4" source ipset="catalyst_whitelist" service name="http" log prefix="catalyst-http-access-allowed" level="info" limit value="1/m" accept'
catalyst_http_reject_rule:  'rule family="ipv4" source NOT ipset="catalyst_whitelist" service name="http" log prefix="catalyst-http-access-denied" level="info" limit value="1/m" reject'
catalyst_https_accept_rule: 'rule family="ipv4" source ipset="catalyst_whitelist" service name="https" log prefix="catalyst-https-access-allowed" level="info" limit value="1/m" accept'
catalyst_https_reject_rule: 'rule family="ipv4" source NOT ipset="catalyst_whitelist" service name="https" log prefix="catalyst-https-access-denied" level="info" limit value="1/m" reject'
firewalld_richrules:
  - rule: "{{ jetty_accept_rule }}"
    state: enabled
  - rule: "{{ jetty_reject_rule }}"
    state: enabled
  # NOTE: this won't work (in leiu of the NOT whitelist reject rule). regardles of the order of the rules, both would be applied to the whitelisted IP (according to the logs), and access would be denied
  # TODO: write-up and remove
# - rule: 'rule family="ipv4" source address="0.0.0.0/0" port port="{{ jetty_port }}" protocol="tcp" log prefix="jetty-access-denied" level="info" limit value="1/m" reject'
#   state: disabled
firewalld_services:
- service: http
- service: https
- service: ssh

# fail2ban vars
fail2ban_failregex: '^<HOST>.*/catalog/bib_.*$'
fail2ban_logpath:   "/var/log/httpd/catalyst-ssl-access.log"
